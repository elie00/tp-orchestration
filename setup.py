#!/usr/bin/env python3
"""
Script de setup et d'initialisation du projet road-sign-ml
Ce script configure l'environnement, installe les d√©pendances et teste les composants de base.
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

def check_python_version():
    """V√©rifie que la version de Python est compatible"""
    min_version = (3, 10)
    current_version = sys.version_info[:2]
    
    if current_version < min_version:
        logger.error(f"Python {min_version[0]}.{min_version[1]}+ requis. Version actuelle: {current_version[0]}.{current_version[1]}")
        return False
    
    logger.info(f"‚úÖ Version Python OK: {current_version[0]}.{current_version[1]}")
    return True

def check_project_structure():
    """V√©rifie que la structure du projet est correcte"""
    required_dirs = [
        "conf/base",
        "data",
        "src/ml_pipelines", 
        "src/api",
        "requirements",
        "logs"
    ]
    
    required_files = [
        "conf/base/model_config.yml",
        "conf/base/mlflow_config.yml",
        "conf/base/logging.yml",
        "requirements/base.txt",
        "pyproject.toml"
    ]
    
    project_root = Path.cwd()
    logger.info(f"V√©rification de la structure dans: {project_root}")
    
    # V√©rification des dossiers
    for dir_path in required_dirs:
        full_path = project_root / dir_path
        if not full_path.exists():
            logger.error(f"‚ùå Dossier manquant: {dir_path}")
            return False
        logger.info(f"‚úÖ Dossier trouv√©: {dir_path}")
    
    # V√©rification des fichiers
    for file_path in required_files:
        full_path = project_root / file_path
        if not full_path.exists():
            logger.error(f"‚ùå Fichier manquant: {file_path}")
            return False
        logger.info(f"‚úÖ Fichier trouv√©: {file_path}")
    
    return True

def setup_virtual_environment():
    """Configure l'environnement virtuel si n√©cessaire"""
    venv_path = Path("venv")
    
    if not venv_path.exists():
        logger.info("Cr√©ation de l'environnement virtuel...")
        try:
            subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
            logger.info("‚úÖ Environnement virtuel cr√©√©")
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Erreur cr√©ation venv: {e}")
            return False
    else:
        logger.info("‚úÖ Environnement virtuel existant trouv√©")
    
    return True

def install_dependencies():
    """Installe les d√©pendances de base"""
    logger.info("Installation des d√©pendances de base...")
    
    # D√©terminer l'ex√©cutable pip dans le venv
    if sys.platform == "win32":
        pip_executable = "venv/Scripts/pip"
        python_executable = "venv/Scripts/python"
    else:
        pip_executable = "venv/bin/pip"
        python_executable = "venv/bin/python"
    
    try:
        # Mise √† jour de pip
        subprocess.run([python_executable, "-m", "pip", "install", "--upgrade", "pip"], check=True)
        logger.info("‚úÖ pip mis √† jour")
        
        # Installation des d√©pendances de base
        subprocess.run([pip_executable, "install", "-r", "requirements/base.txt"], check=True)
        logger.info("‚úÖ D√©pendances de base install√©es")
        
        # Installation des d√©pendances de d√©veloppement
        subprocess.run([pip_executable, "install", "-r", "requirements/dev.txt"], check=True)
        logger.info("‚úÖ D√©pendances de d√©veloppement install√©es")
        
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erreur installation d√©pendances: {e}")
        return False

def test_imports():
    """Teste que les imports principaux fonctionnent"""
    logger.info("Test des imports principaux...")
    
    test_imports = [
        ("mlflow", "MLflow"),
        ("fastapi", "FastAPI"),
        ("ultralytics", "Ultralytics YOLO"),
        ("cv2", "OpenCV"),
        ("PIL", "Pillow"),
        ("numpy", "NumPy"),
        ("pandas", "Pandas"),
        ("torch", "PyTorch"),
        ("yaml", "PyYAML")
    ]
    
    failed_imports = []
    
    for module, name in test_imports:
        try:
            __import__(module)
            logger.info(f"‚úÖ {name} import√© avec succ√®s")
        except ImportError as e:
            logger.error(f"‚ùå √âchec import {name}: {e}")
            failed_imports.append(name)
    
    if failed_imports:
        logger.error(f"‚ùå Imports √©chou√©s: {', '.join(failed_imports)}")
        return False
    
    logger.info("‚úÖ Tous les imports principaux r√©ussis")
    return True

def test_mlflow_setup():
    """Teste la configuration MLflow"""
    logger.info("Test de la configuration MLflow...")
    
    try:
        import mlflow
        
        # Test de connexion locale
        mlflow.set_tracking_uri("sqlite:///mlflow.db")
        
        # Cr√©ation d'un run de test
        with mlflow.start_run(run_name="setup_test"):
            mlflow.log_param("setup_test", "success")
            mlflow.log_metric("test_metric", 1.0)
            mlflow.set_tag("test_tag", "setup")
        
        logger.info("‚úÖ MLflow configur√© et test√© avec succ√®s")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test MLflow: {e}")
        return False

def test_data_pipeline():
    """Teste le pipeline de donn√©es de base"""
    logger.info("Test du pipeline de donn√©es...")
    
    try:
        # Import du pipeline
        sys.path.append("src")
        from ml_pipelines.data_pipeline import DataPipeline
        
        # Test d'initialisation
        pipeline = DataPipeline()
        logger.info("‚úÖ Pipeline de donn√©es initialis√©")
        
        # Test de cr√©ation des r√©pertoires
        pipeline._create_directories()
        logger.info("‚úÖ R√©pertoires cr√©√©s")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test pipeline donn√©es: {e}")
        return False

def create_readme():
    """Cr√©e un README de base pour le projet"""
    readme_content = """# üö¶ Road Sign ML Project

Syst√®me d'industrialisation ML pour la d√©tection et reconnaissance de panneaux routiers.

## üéØ Objectifs

- **D√©tection** : YOLOv8 pour identifier les panneaux routiers
- **OCR** : Tesseract/EasyOCR pour lire le texte des panneaux
- **Stack** : MLflow + FastAPI + Kubernetes

## üõ†Ô∏è Stack Technique

- **ML Pipeline** : MLflow pour tracking et gestion des mod√®les
- **API** : FastAPI avec documentation automatique
- **Containerisation** : Docker multi-stage
- **Orchestration** : Kubernetes + Helm
- **CI/CD** : GitHub Actions
- **Monitoring** : Prometheus + Grafana

## üöÄ Quick Start

### 1. Setup initial

```bash
# Clone et setup
cd road_sign_ml_project
python3.10 setup.py

# Activation environnement virtuel
source venv/bin/activate  # Linux/Mac
# ou
venv\\Scripts\\activate  # Windows
```

### 2. Lancement pipeline donn√©es

```bash
python3.10 src/ml_pipelines/data_pipeline.py
```

### 3. Interface MLflow

```bash
mlflow ui --host 0.0.0.0 --port 5000
```

Acc√®s : http://localhost:5000

## üìÅ Structure du projet

```
road_sign_ml_project/
‚îú‚îÄ‚îÄ conf/base/              # Configuration
‚îú‚îÄ‚îÄ data/                   # Donn√©es (gitignore)
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ ml_pipelines/       # Pipelines ML
‚îÇ   ‚îú‚îÄ‚îÄ api/               # API FastAPI
‚îÇ   ‚îî‚îÄ‚îÄ tests/             # Tests unitaires
‚îú‚îÄ‚îÄ docker/                # Containers
‚îú‚îÄ‚îÄ kubernetes/            # Manifests K8s
‚îú‚îÄ‚îÄ requirements/          # D√©pendances
‚îî‚îÄ‚îÄ logs/                  # Logs applicatifs
```

## üìä M√©triques cibles

- **Coverage tests** : ‚â• 80%
- **Performance API** : < 2s par pr√©diction
- **Scalabilit√© K8s** : 1-10 replicas auto
- **Disponibilit√©** : 99.9% uptime

## üìù Documentation

- **Configuration** : `conf/base/`
- **R√©capitulatif** : `RECAPITULATIF.md`
- **API Docs** : http://localhost:8000/docs (apr√®s lancement API)

## üîß D√©veloppement

```bash
# Tests
pytest src/tests/ --cov=src --cov-report=html

# Linting
black src/
isort src/
flake8 src/

# Type checking
mypy src/
```

## üê≥ Docker

```bash
# Build
docker build -t road-sign-ml:latest .

# Run
docker run -p 8000:8000 road-sign-ml:latest
```

## ‚ò∏Ô∏è Kubernetes

```bash
# Deploy
kubectl apply -f kubernetes/

# Check status
kubectl get pods,svc,hpa
```

---

**Auteur :** eybo  
**Statut :** En d√©veloppement actif  
**Version :** 0.1.0
"""
    
    readme_path = Path("README.md")
    with open(readme_path, 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    logger.info("‚úÖ README.md cr√©√©")

def main():
    """Point d'entr√©e principal du script de setup"""
    logger.info("üöÄ === SETUP DU PROJET ROAD-SIGN-ML ===")
    
    # V√©rifications pr√©liminaires
    if not check_python_version():
        sys.exit(1)
    
    if not check_project_structure():
        logger.error("‚ùå Structure de projet incorrecte")
        sys.exit(1)
    
    # Setup environnement virtuel
    if not setup_virtual_environment():
        logger.error("‚ùå √âchec cr√©ation environnement virtuel")
        sys.exit(1)
    
    # Installation d√©pendances
    logger.info("‚ö†Ô∏è  Installation des d√©pendances (cela peut prendre plusieurs minutes)...")
    if not install_dependencies():
        logger.error("‚ùå √âchec installation d√©pendances")
        sys.exit(1)
    
    # Tests de base
    if not test_imports():
        logger.error("‚ùå √âchec tests d'imports")
        sys.exit(1)
    
    if not test_mlflow_setup():
        logger.error("‚ùå √âchec test MLflow")
        sys.exit(1)
    
    if not test_data_pipeline():
        logger.error("‚ùå √âchec test pipeline donn√©es")
        sys.exit(1)
    
    # Cr√©ation documentation
    create_readme()
    
    # Message de succ√®s
    logger.info("üéâ === SETUP TERMIN√â AVEC SUCC√àS ===")
    print("\n" + "="*60)
    print("‚úÖ PROJET ROAD-SIGN-ML PR√äT POUR LE D√âVELOPPEMENT!")
    print("="*60)
    print("\nüìã PROCHAINES √âTAPES:")
    print("1. Activer l'environnement virtuel:")
    if sys.platform == "win32":
        print("   venv\\Scripts\\activate")
    else:
        print("   source venv/bin/activate")
    print("\n2. Lancer le pipeline de donn√©es:")
    print("   python3.10 src/ml_pipelines/data_pipeline.py")
    print("\n3. D√©marrer MLflow UI:")
    print("   mlflow ui --host 0.0.0.0 --port 5000")
    print("   Acc√®s: http://localhost:5000")
    print("\n4. Consulter le r√©capitulatif:")
    print("   cat RECAPITULATIF.md")
    print("\nüîó Documentation compl√®te: README.md")
    print("="*60)

if __name__ == "__main__":
    main()
