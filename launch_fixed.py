#!/usr/bin/env python3.10
"""
Script de lancement s√©curis√© du projet Road Sign ML
Ce script installe les d√©pendances progressivement et lance l'API
"""

import os
import sys
import subprocess
import logging
from pathlib import Path
import time

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

def run_command(cmd, description=""):
    """Ex√©cute une commande et g√®re les erreurs"""
    logger.info(f"üîÑ {description}")
    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
        if result.stdout.strip():
            logger.info(f"‚úÖ {description} - Succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå {description} - Erreur: {e}")
        if e.stdout:
            logger.error(f"STDOUT: {e.stdout}")
        if e.stderr:
            logger.error(f"STDERR: {e.stderr}")
        return False

def install_minimal_dependencies():
    """Installe d'abord les d√©pendances minimales"""
    logger.info("üì¶ Installation des d√©pendances minimales...")
    
    if not run_command("pip install --upgrade pip", "Mise √† jour de pip"):
        return False
    
    if not run_command("pip install -r requirements/minimal.txt", "Installation d√©pendances minimales"):
        return False
    
    return True

def test_minimal_imports():
    """Teste les imports minimaux"""
    logger.info("üß™ Test des imports minimaux...")
    
    # Liste des modules √† tester
    modules_to_test = [
        "fastapi",
        "uvicorn", 
        "pydantic",
        "numpy",
        "PIL"
    ]
    
    for module in modules_to_test:
        test_cmd = f'python3.10 -c "import {module}; print(f\'{module} OK\')"'
        if not run_command(test_cmd, f"Test import {module}"):
            logger.error(f"‚ùå √âchec import du module {module}")
            return False
    
    logger.info("‚úÖ Tous les imports minimaux r√©ussis")
    return True

def test_imports_alternative():
    """M√©thode alternative pour tester les imports"""
    logger.info("üîß Test alternatif des imports...")
    
    try:
        import fastapi
        logger.info("‚úÖ FastAPI import√©")
        
        import uvicorn
        logger.info("‚úÖ Uvicorn import√©")
        
        import pydantic
        logger.info("‚úÖ Pydantic import√©")
        
        import numpy
        logger.info("‚úÖ NumPy import√©")
        
        import PIL
        logger.info("‚úÖ Pillow import√©")
        
        logger.info("‚úÖ Tous les imports test√©s avec succ√®s")
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå Erreur d'import: {e}")
        return False

def launch_simple_api():
    """Lance l'API simple"""
    logger.info("üöÄ Lancement de l'API simple...")
    
    # V√©rification du fichier API
    api_file = Path("src/api/main_simple.py")
    if not api_file.exists():
        logger.error("‚ùå Fichier src/api/main_simple.py non trouv√©")
        return False
    
    # Changement vers le r√©pertoire racine pour les imports
    current_dir = os.getcwd()
    
    logger.info("üåê API disponible sur: http://localhost:8000")
    logger.info("üìñ Documentation sur: http://localhost:8000/docs") 
    logger.info("üíö Health check sur: http://localhost:8000/health")
    logger.info("\n‚ö†Ô∏è  Pour arr√™ter l'API, utilisez Ctrl+C")
    logger.info("‚ö†Ô∏è  Ou fermez ce terminal")
    
    # Lancement de l'API
    try:
        # Lancement depuis la racine du projet
        subprocess.run([sys.executable, "src/api/main_simple.py"], check=True)
    except KeyboardInterrupt:
        logger.info("\nüõë Arr√™t de l'API demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du lancement de l'API: {e}")
        return False
    
    return True

def install_full_dependencies():
    """Installe les d√©pendances compl√®tes (optionnel)"""
    logger.info("üì¶ Installation des d√©pendances compl√®tes...")
    
    if not run_command("pip install -r requirements/base_fixed.txt", "Installation d√©pendances compl√®tes"):
        logger.warning("‚ö†Ô∏è √âchec installation compl√®te, utilisation du mode simple")
        return False
    
    return True

def check_project_structure():
    """V√©rifie que les fichiers essentiels existent"""
    required_files = [
        "requirements/minimal.txt",
        "src/api/main_simple.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
    
    if missing_files:
        logger.error("‚ùå Fichiers manquants:")
        for file in missing_files:
            logger.error(f"   - {file}")
        return False
    
    logger.info("‚úÖ Structure du projet OK")
    return True

def main():
    """Point d'entr√©e principal"""
    logger.info("üöÄ === LANCEMENT ROAD SIGN ML PROJECT ===")
    
    # V√©rification de la structure du projet
    if not check_project_structure():
        logger.error("‚ùå Structure de projet incompl√®te")
        logger.error("Assurez-vous d'√™tre dans le r√©pertoire du projet")
        sys.exit(1)
    
    # √âtape 1: Installation minimale
    if not install_minimal_dependencies():
        logger.error("‚ùå √âchec installation d√©pendances minimales")
        sys.exit(1)
    
    # √âtape 2: Test des imports (avec m√©thode alternative si √©chec)
    if not test_minimal_imports():
        logger.warning("‚ö†Ô∏è Test imports en ligne de commande √©chou√©, essai m√©thode alternative...")
        if not test_imports_alternative():
            logger.error("‚ùå √âchec test des imports")
            sys.exit(1)
    
    # √âtape 3: Proposer installation compl√®te
    print("\n" + "="*60)
    print("‚úÖ INFRASTRUCTURE API PR√äTE!")
    print("="*60)
    print("\nüéØ Options de lancement:")
    print("1. Lancer l'API simple maintenant (recommand√©)")
    print("2. Installer d'abord toutes les d√©pendances ML")
    print("3. Quitter")
    
    try:
        choice = input("\nVotre choix (1/2/3): ").strip()
        
        if choice == "1" or choice == "":  # Choix par d√©faut
            logger.info("üéØ Lancement en mode simple")
            launch_simple_api()
            
        elif choice == "2":
            if install_full_dependencies():
                logger.info("‚úÖ Installation compl√®te r√©ussie")
                print("\nVous pouvez maintenant lancer:")
                print("python3.10 src/api/main.py")
            else:
                logger.warning("‚ö†Ô∏è Installation partielle, lancement en mode simple")
                launch_simple_api()
                
        elif choice == "3":
            logger.info("üëã Au revoir!")
            
        else:
            logger.warning("Choix invalide, lancement en mode simple")
            launch_simple_api()
            
    except KeyboardInterrupt:
        logger.info("\nüëã Au revoir!")
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue: {e}")

if __name__ == "__main__":
    main()
