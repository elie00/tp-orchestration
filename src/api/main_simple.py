"""
API FastAPI simplifi√©e pour le service de d√©tection et reconnaissance de panneaux routiers
Version de d√©marrage sans d√©pendances ML complexes
"""

import logging
import time
import io
import uuid
from pathlib import Path
from typing import Dict, List, Optional
import json

from fastapi import FastAPI, File, UploadFile, HTTPException, BackgroundTasks
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
import numpy as np
from PIL import Image

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialisation de l'application FastAPI
app = FastAPI(
    title="üö¶ Road Sign ML API (Version Simple)",
    description="API pour la d√©tection et reconnaissance de panneaux routiers - Version de d√©marrage",
    version="1.0.0-simple",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Statistiques globales
app_stats = {
    "total_predictions": 0,
    "total_detections": 0,
    "total_processing_time": 0.0,
    "start_time": time.time()
}

# ==========================================
# MOD√àLES PYDANTIC POUR VALIDATION
# ==========================================

class DetectionResult(BaseModel):
    """Mod√®le pour une d√©tection individuelle"""
    bbox: List[int] = Field(..., description="Bounding box [x1, y1, x2, y2]")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Confiance de d√©tection")
    class_id: int = Field(..., description="ID de la classe")
    class_name: str = Field(..., description="Nom de la classe")
    ocr: Dict = Field(..., description="R√©sultat OCR")
    has_text: bool = Field(..., description="Pr√©sence de texte d√©tect√©")

class PredictionResponse(BaseModel):
    """Mod√®le pour la r√©ponse de pr√©diction"""
    success: bool = Field(..., description="Succ√®s de la pr√©diction")
    image_shape: List[int] = Field(..., description="Dimensions de l'image [H, W, C]")
    detections_count: int = Field(..., description="Nombre de d√©tections")
    results: List[DetectionResult] = Field(..., description="Liste des d√©tections")
    processing_time: float = Field(..., description="Temps de traitement en secondes")
    pipeline_version: str = Field(..., description="Version du pipeline")
    request_id: str = Field(..., description="ID unique de la requ√™te")

class HealthResponse(BaseModel):
    """Mod√®le pour la r√©ponse de sant√©"""
    status: str = Field(..., description="Statut de l'API")
    pipeline_loaded: bool = Field(..., description="Pipeline charg√©")
    uptime: float = Field(..., description="Temps de fonctionnement en secondes")
    total_predictions: int = Field(..., description="Nombre total de pr√©dictions")
    version: str = Field(..., description="Version de l'API")

class MetricsResponse(BaseModel):
    """Mod√®le pour les m√©triques Prometheus"""
    total_predictions: int
    total_detections: int
    average_processing_time: float
    uptime: float
    pipeline_status: str

# ==========================================
# FONCTIONS UTILITAIRES
# ==========================================

def update_stats(detections_count: int, processing_time: float):
    """Met √† jour les statistiques globales"""
    global app_stats
    app_stats["total_predictions"] += 1
    app_stats["total_detections"] += detections_count
    app_stats["total_processing_time"] += processing_time

def process_uploaded_file(file: UploadFile) -> np.ndarray:
    """
    Traite un fichier upload√© et le convertit en image numpy
    
    Args:
        file: Fichier upload√©
        
    Returns:
        np.ndarray: Image sous forme de tableau numpy
    """
    # V√©rification du type de fichier
    if not file.content_type or not file.content_type.startswith('image/'):
        raise HTTPException(
            status_code=400, 
            detail=f"Type de fichier non support√©: {file.content_type}. Utilisez une image."
        )
    
    try:
        # Lecture du fichier
        image_data = file.file.read()
        
        # Conversion en image PIL puis numpy
        pil_image = Image.open(io.BytesIO(image_data))
        
        # Conversion en RGB si n√©cessaire
        if pil_image.mode != 'RGB':
            pil_image = pil_image.convert('RGB')
        
        # Conversion en numpy array
        numpy_image = np.array(pil_image)
        
        return numpy_image
        
    except Exception as e:
        logger.error(f"Erreur traitement fichier: {e}")
        raise HTTPException(
            status_code=400,
            detail=f"Impossible de traiter l'image: {str(e)}"
        )

def mock_prediction(image: np.ndarray) -> Dict:
    """
    Pipeline de pr√©diction fictif pour tester l'API
    
    Args:
        image: Image sous forme de tableau numpy
        
    Returns:
        Dict: R√©sultats de pr√©diction fictifs
    """
    start_time = time.time()
    
    # Simulation du traitement
    time.sleep(0.1)  # Simulation d'un temps de traitement
    
    # R√©sultats fictifs
    mock_results = [
        {
            "bbox": [100, 100, 200, 200],
            "confidence": 0.85,
            "class_id": 1,
            "class_name": "Speed Limit",
            "ocr": {
                "text": "50",
                "confidence": 0.92
            },
            "has_text": True
        },
        {
            "bbox": [300, 150, 400, 250],
            "confidence": 0.75,
            "class_id": 2,
            "class_name": "Stop Sign",
            "ocr": {
                "text": "STOP",
                "confidence": 0.98
            },
            "has_text": True
        }
    ]
    
    processing_time = time.time() - start_time
    
    return {
        "success": True,
        "image_shape": list(image.shape),
        "detections_count": len(mock_results),
        "results": mock_results,
        "processing_time": processing_time,
        "pipeline_version": "1.0.0-mock"
    }

# ==========================================
# √âV√âNEMENTS DE CYCLE DE VIE
# ==========================================

@app.on_event("startup")
async def startup_event():
    """Initialisation au d√©marrage de l'application"""
    logger.info("üöÄ D√©marrage de l'API Road Sign ML (Version Simple)")
    
    # Cr√©ation des r√©pertoires n√©cessaires
    Path("logs").mkdir(exist_ok=True)
    Path("temp").mkdir(exist_ok=True)
    
    logger.info("‚úÖ API Road Sign ML d√©marr√©e avec succ√®s (Mode Simple)")

@app.on_event("shutdown")
async def shutdown_event():
    """Nettoyage √† l'arr√™t de l'application"""
    logger.info("üõë Arr√™t de l'API Road Sign ML")
    
    # Nettoyage des fichiers temporaires
    temp_dir = Path("temp")
    if temp_dir.exists():
        for temp_file in temp_dir.glob("*"):
            try:
                temp_file.unlink()
            except Exception:
                pass
    
    logger.info("‚úÖ API Road Sign ML arr√™t√©e proprement")

# ==========================================
# ROUTES PRINCIPALES
# ==========================================

@app.get("/", response_class=HTMLResponse)
async def root():
    """Page d'accueil avec interface de test"""
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>üö¶ Road Sign ML API (Simple)</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            h1 { color: #2c3e50; text-align: center; }
            .section { margin: 30px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
            .upload-area { border: 2px dashed #3498db; padding: 40px; text-align: center; border-radius: 10px; }
            .upload-area:hover { background-color: #ecf0f1; }
            input[type="file"] { margin: 20px 0; }
            button { background-color: #3498db; color: white; padding: 12px 24px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; }
            button:hover { background-color: #2980b9; }
            .result { margin-top: 20px; padding: 15px; background-color: #f8f9fa; border-radius: 5px; }
            .error { background-color: #f8d7da; color: #721c24; }
            .success { background-color: #d4edda; color: #155724; }
            .warning { background-color: #fff3cd; color: #856404; }
            .stats { display: flex; justify-content: space-around; text-align: center; }
            .stat-item { padding: 15px; }
            .stat-number { font-size: 24px; font-weight: bold; color: #3498db; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üö¶ Road Sign ML API</h1>
            <p style="text-align: center; color: #7f8c8d;">
                Version de d√©marrage - Test de l'infrastructure API
            </p>
            
            <div class="section warning">
                <h3>‚ö†Ô∏è Mode de d√©monstration</h3>
                <p>Cette version utilise des r√©sultats de pr√©diction fictifs pour tester l'infrastructure de l'API. 
                Les vrais mod√®les ML seront ajout√©s apr√®s validation de la base.</p>
            </div>
            
            <div class="section">
                <h2>üìä Statistiques en temps r√©el</h2>
                <div class="stats" id="stats">
                    <div class="stat-item">
                        <div class="stat-number" id="predictions">-</div>
                        <div>Pr√©dictions</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="detections">-</div>
                        <div>D√©tections</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="uptime">-</div>
                        <div>Uptime (min)</div>
                    </div>
                </div>
            </div>
            
            <div class="section">
                <h2>üñºÔ∏è Test de pr√©diction (Mode d√©mo)</h2>
                <div class="upload-area">
                    <p>üìÅ Glissez-d√©posez une image ici ou cliquez pour s√©lectionner</p>
                    <input type="file" id="imageInput" accept="image/*" />
                    <br>
                    <button onclick="predictImage()">üîç Analyser l'image (D√©mo)</button>
                </div>
                <div id="result" class="result" style="display: none;"></div>
                <div id="imagePreview" style="margin-top: 20px; text-align: center;"></div>
            </div>
            
            <div class="section">
                <h2>üìö Documentation</h2>
                <p>
                    <strong>Endpoints disponibles :</strong><br>
                    ‚Ä¢ <a href="/docs" target="_blank">üìñ Documentation Swagger</a><br>
                    ‚Ä¢ <a href="/health" target="_blank">üíö Health Check</a><br>
                    ‚Ä¢ <a href="/metrics" target="_blank">üìä M√©triques Prometheus</a><br>
                    ‚Ä¢ <code>POST /predict</code> - Pr√©diction sur image (Mode d√©mo)<br>
                </p>
            </div>
        </div>
        
        <script>
            // Mise √† jour des statistiques
            async function updateStats() {
                try {
                    const response = await fetch('/health');
                    const data = await response.json();
                    document.getElementById('predictions').textContent = data.total_predictions;
                    document.getElementById('uptime').textContent = Math.round(data.uptime / 60);
                    
                    const metricsResponse = await fetch('/metrics');
                    const metricsData = await metricsResponse.json();
                    document.getElementById('detections').textContent = metricsData.total_detections;
                } catch (error) {
                    console.error('Erreur mise √† jour stats:', error);
                }
            }
            
            // Pr√©diction d'image
            async function predictImage() {
                const fileInput = document.getElementById('imageInput');
                const resultDiv = document.getElementById('result');
                const previewDiv = document.getElementById('imagePreview');
                
                if (!fileInput.files[0]) {
                    alert('Veuillez s√©lectionner une image');
                    return;
                }
                
                const formData = new FormData();
                formData.append('file', fileInput.files[0]);
                
                resultDiv.style.display = 'block';
                resultDiv.className = 'result';
                resultDiv.innerHTML = '‚è≥ Analyse en cours (mode d√©mo)...';
                
                // Aper√ßu de l'image
                const file = fileInput.files[0];
                const reader = new FileReader();
                reader.onload = function(e) {
                    previewDiv.innerHTML = `<img src="${e.target.result}" style="max-width: 400px; max-height: 300px; border-radius: 5px;">`;
                };
                reader.readAsDataURL(file);
                
                try {
                    const response = await fetch('/predict', {
                        method: 'POST',
                        body: formData
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        resultDiv.className = 'result success';
                        let html = `<h3>‚úÖ Test d'analyse r√©ussi! (R√©sultats fictifs)</h3>
                            <p><strong>D√©tections trouv√©es:</strong> ${data.detections_count}</p>
                            <p><strong>Temps de traitement:</strong> ${data.processing_time.toFixed(3)}s</p>
                            <p><strong>Version pipeline:</strong> ${data.pipeline_version}</p>`;
                        
                        if (data.results && data.results.length > 0) {
                            html += '<h4>üìã D√©tections simul√©es:</h4>';
                            data.results.forEach((result, index) => {
                                html += `
                                    <div style="margin: 10px 0; padding: 10px; background: #e8f4f8; border-radius: 5px;">
                                        <strong>D√©tection ${index + 1} (fictive):</strong><br>
                                        ‚Ä¢ Classe: ${result.class_name}<br>
                                        ‚Ä¢ Confiance: ${(result.confidence * 100).toFixed(1)}%<br>
                                        ‚Ä¢ Texte OCR: "${result.ocr.text}"<br>
                                        ‚Ä¢ Confiance OCR: ${(result.ocr.confidence * 100).toFixed(1)}%
                                    </div>
                                `;
                            });
                        }
                        
                        resultDiv.innerHTML = html;
                    } else {
                        resultDiv.className = 'result error';
                        resultDiv.innerHTML = `<h3>‚ùå Erreur</h3><p>${data.error || 'Erreur inconnue'}</p>`;
                    }
                    
                    updateStats();
                    
                } catch (error) {
                    resultDiv.className = 'result error';
                    resultDiv.innerHTML = `<h3>‚ùå Erreur de connexion</h3><p>${error.message}</p>`;
                }
            }
            
            // Mise √† jour initiale et p√©riodique des stats
            updateStats();
            setInterval(updateStats, 10000); // Toutes les 10 secondes
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.post("/predict", response_model=PredictionResponse)
async def predict_image(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(..., description="Image √† analyser")
):
    """
    Effectue une pr√©diction fictive sur une image upload√©e
    
    Args:
        file: Fichier image (JPEG, PNG, etc.)
        
    Returns:
        PredictionResponse: R√©sultats de la pr√©diction
    """
    request_id = str(uuid.uuid4())
    start_time = time.time()
    
    try:
        logger.info(f"Nouvelle pr√©diction (mode d√©mo) - ID: {request_id}")
        
        # Traitement du fichier upload√©
        image = process_uploaded_file(file)
        
        # Pr√©diction fictive
        result = mock_prediction(image)
        
        # Mise √† jour des statistiques
        processing_time = result['processing_time']
        detections_count = result['detections_count']
        update_stats(detections_count, processing_time)
        
        # Pr√©paration de la r√©ponse
        response = PredictionResponse(
            success=True,
            image_shape=result['image_shape'],
            detections_count=detections_count,
            results=result['results'],
            processing_time=processing_time,
            pipeline_version=result['pipeline_version'],
            request_id=request_id
        )
        
        logger.info(f"Pr√©diction r√©ussie (mode d√©mo) - ID: {request_id} - {detections_count} d√©tections")
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erreur pr√©diction - ID: {request_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur interne: {str(e)}"
        )

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """V√©rification de l'√©tat de sant√© de l'API"""
    uptime = time.time() - app_stats["start_time"]
    
    return HealthResponse(
        status="healthy",
        pipeline_loaded=True,  # Toujours vrai en mode simple
        uptime=uptime,
        total_predictions=app_stats["total_predictions"],
        version="1.0.0-simple"
    )

@app.get("/metrics", response_model=MetricsResponse)
async def get_metrics():
    """M√©triques Prometheus pour monitoring"""
    uptime = time.time() - app_stats["start_time"]
    avg_processing_time = (
        app_stats["total_processing_time"] / app_stats["total_predictions"]
        if app_stats["total_predictions"] > 0 else 0.0
    )
    
    return MetricsResponse(
        total_predictions=app_stats["total_predictions"],
        total_detections=app_stats["total_detections"],
        average_processing_time=avg_processing_time,
        uptime=uptime,
        pipeline_status="mock_loaded"
    )

# ==========================================
# POINT D'ENTR√âE
# ==========================================

def run_server(host: str = "0.0.0.0", port: int = 8000, reload: bool = False):
    """
    Lance le serveur FastAPI
    
    Args:
        host: Adresse d'√©coute
        port: Port d'√©coute  
        reload: Rechargement automatique en d√©veloppement
    """
    import uvicorn
    
    logger.info(f"üöÄ Lancement du serveur API (Mode Simple) sur {host}:{port}")
    uvicorn.run(
        "main_simple:app",
        host=host,
        port=port,
        reload=reload,
        log_level="info"
    )

if __name__ == "__main__":
    run_server(reload=True)
