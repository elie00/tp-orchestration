[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "road-sign-ml-project"
version = "0.1.0"
description = "Système ML industrialisé pour la lecture de panneaux routiers avec YOLOv8 + OCR"
authors = [
    {name = "eybo", email = "eybo@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["machine-learning", "computer-vision", "yolo", "ocr", "kubernetes", "mlops"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "mlflow>=2.12.1",
    "fastapi>=0.109.2",
    "ultralytics>=8.2.18",
    "pytesseract>=0.3.10",
    "opencv-python>=4.9.0",
    "numpy>=1.26.4",
    "pandas>=2.2.2",
    "torch>=2.3.0",
    "Pillow>=10.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.1.1",
    "pytest-cov>=5.0.0",
    "black>=24.3.0",
    "isort>=5.13.2",
    "flake8>=7.0.0",
    "mypy>=1.9.0",
    "pre-commit>=3.7.0",
    "jupyter>=1.0.0",
]

api = [
    "uvicorn[standard]>=0.29.0",
    "python-multipart>=0.0.9",
    "pydantic>=2.6.4",
]

monitoring = [
    "prometheus-client>=0.20.0",
    "structlog>=24.1.0",
    "opentelemetry-api>=1.24.0",
]

[project.urls]
Homepage = "https://github.com/eybo/road-sign-ml-project"
Repository = "https://github.com/eybo/road-sign-ml-project.git"
Documentation = "https://github.com/eybo/road-sign-ml-project/docs"
Changelog = "https://github.com/eybo/road-sign-ml-project/CHANGELOG.md"

[project.scripts]
road-sign-api = "src.api.main:run_server"
road-sign-train = "src.ml_pipelines.training_pipeline:main"

# ==========================================
# TOOL CONFIGURATION
# ==========================================

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json", "*.txt", "*.md"]

# Black - Code formatting
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | data
  | logs
)/
'''

# isort - Import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# pytest - Testing configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
testpaths = ["src/tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "src/tests/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.tox/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# MyPy - Type checking
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ultralytics.*",
    "cv2.*", 
    "tesseract.*",
    "mlflow.*",
]
ignore_missing_imports = true

# Flake8 - Linting (configuration dans .flake8 car pas de support TOML)

# Bandit - Security linting
[tool.bandit]
exclude_dirs = ["src/tests", "venv", ".venv"]
skips = ["B101", "B601"]
