name: üöÄ Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - hotfix
      skip_tests:
        description: 'Skip pre-deployment tests (emergency only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ENVIRONMENT: production

jobs:
  # Job 1: Pre-deployment Validation
  pre-deployment-validation:
    name: üîç Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Validate Branch Protection
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.ref }}" != refs/tags/* ]]; then
            echo "‚ùå Production deployment only allowed from main branch or tags"
            exit 1
          fi

      - name: üè∑Ô∏è Extract Version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::8}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Version: $VERSION"

      - name: üìã Check Required Secrets
        run: |
          required_secrets=("PROD_KUBECONFIG" "DOCKER_REGISTRY_TOKEN" "SLACK_WEBHOOK_URL")
          for secret in "${required_secrets[@]}"; do
            if [[ -z "${!secret}" ]]; then
              echo "‚ùå Required secret $secret is not set"
              exit 1
            fi
          done
        env:
          PROD_KUBECONFIG: ${{ secrets.PROD_KUBECONFIG }}
          DOCKER_REGISTRY_TOKEN: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    outputs:
      version: ${{ steps.version.outputs.version }}

  # Job 2: Security and Compliance Checks
  security-compliance:
    name: üîí Security & Compliance
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    timeout-minutes: 20
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîí SAST Security Scan
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: üîß Build for Analysis
        run: |
          pip install -r requirements/minimal.txt

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: üîí Container Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './docker/Dockerfile.api'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üìã License Compliance Check
        run: |
          pip install pip-licenses
          pip-licenses --format=json --output-file=licenses.json
          # Add custom license validation logic here

      - name: üìä Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 3: Build Production Images
  build-production:
    name: üè≠ Build Production Images
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, security-compliance]
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
      id-token: write # For OIDC
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-west-2

      - name: üîë Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üîë Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üìã Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ steps.login-ecr.outputs.registry }}/road-sign-ml
          tags: |
            type=ref,event=tag
            type=raw,value=prod-latest
            type=raw,value=prod-${{ needs.pre-deployment-validation.outputs.version }}
            type=sha,prefix=prod-

      - name: üê≥ Build and Push Production Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          target: production
          build-args: |
            VERSION=${{ needs.pre-deployment-validation.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

      - name: üîê Sign Container Image
        run: |
          # Install cosign
          go install github.com/sigstore/cosign/v2/cmd/cosign@latest
          
          # Sign the image
          cosign sign --yes ${{ steps.meta.outputs.tags }}@${{ steps.build.outputs.digest }}

  # Job 4: Staging Validation (if not from tag)
  staging-validation:
    name: üåü Staging Validation
    runs-on: ubuntu-latest
    needs: build-production
    if: ${{ !startsWith(github.ref, 'refs/tags/') && github.event.inputs.skip_tests != 'true' }}
    timeout-minutes: 30
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚ò∏Ô∏è Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: üîß Configure Staging Access
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: üß™ Run Pre-production Tests
        run: |
          pytest src/tests/staging/ \
            --base-url=https://staging.road-sign-ml.com \
            --timeout=60 \
            -v
        env:
          STAGING_URL: https://staging.road-sign-ml.com

      - name: ‚ö° Performance Validation
        run: |
          locust -f src/tests/performance/production_readiness.py \
            --host=https://staging.road-sign-ml.com \
            --users=100 \
            --spawn-rate=10 \
            --run-time=180s \
            --headless \
            --html=prod-readiness-report.html

  # Job 5: Blue-Green Deployment Setup
  blue-green-setup:
    name: üîÑ Blue-Green Setup
    runs-on: ubuntu-latest
    needs: [build-production, staging-validation]
    if: always() && needs.build-production.result == 'success'
    timeout-minutes: 15
    environment:
      name: production-blue
      url: https://blue.road-sign-ml.com
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚ò∏Ô∏è Setup Production Access
        run: |
          echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: üîç Check Current Production State
        id: current-state
        run: |
          export KUBECONFIG=kubeconfig
          
          # Check which environment is currently active
          ACTIVE_ENV=$(kubectl get service road-sign-api-active -n road-sign-ml -o jsonpath='{.metadata.labels.active-environment}' || echo "green")
          INACTIVE_ENV=$([ "$ACTIVE_ENV" = "blue" ] && echo "green" || echo "blue")
          
          echo "active-env=$ACTIVE_ENV" >> $GITHUB_OUTPUT
          echo "inactive-env=$INACTIVE_ENV" >> $GITHUB_OUTPUT
          echo "üîÑ Current active: $ACTIVE_ENV, deploying to: $INACTIVE_ENV"

    outputs:
      active-env: ${{ steps.current-state.outputs.active-env }}
      inactive-env: ${{ steps.current-state.outputs.inactive-env }}

  # Job 6: Deploy to Inactive Environment
  deploy-inactive:
    name: üöÄ Deploy to ${{ needs.blue-green-setup.outputs.inactive-env }} Environment
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build-production, blue-green-setup]
    timeout-minutes: 25
    environment:
      name: production-${{ needs.blue-green-setup.outputs.inactive-env }}
      url: https://${{ needs.blue-green-setup.outputs.inactive-env }}.road-sign-ml.com
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚ò∏Ô∏è Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: üîß Configure Production Access
        run: |
          echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: üìù Prepare Deployment Manifests
        env:
          INACTIVE_ENV: ${{ needs.blue-green-setup.outputs.inactive-env }}
          IMAGE_TAG: ${{ needs.build-production.outputs.image-tag }}
          VERSION: ${{ needs.pre-deployment-validation.outputs.version }}
        run: |
          # Generate environment-specific manifests
          export TARGET_ENV=$INACTIVE_ENV
          export IMAGE_TAG=$IMAGE_TAG
          export VERSION=$VERSION
          
          envsubst < kubernetes/api/deployment.yaml > deployment-${INACTIVE_ENV}.yaml
          envsubst < kubernetes/api/service.yaml > service-${INACTIVE_ENV}.yaml

      - name: üöÄ Deploy to Inactive Environment
        env:
          INACTIVE_ENV: ${{ needs.blue-green-setup.outputs.inactive-env }}
        run: |
          export KUBECONFIG=kubeconfig
          
          # Deploy to inactive environment
          kubectl apply -f deployment-${INACTIVE_ENV}.yaml -n road-sign-ml
          kubectl apply -f service-${INACTIVE_ENV}.yaml -n road-sign-ml
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/road-sign-api-${INACTIVE_ENV} -n road-sign-ml --timeout=600s

      - name: üîç Health Check
        env:
          INACTIVE_ENV: ${{ needs.blue-green-setup.outputs.inactive-env }}
        run: |
          export KUBECONFIG=kubeconfig
          
          # Port forward to test the inactive environment
          kubectl port-forward svc/road-sign-api-${INACTIVE_ENV} 8080:8000 -n road-sign-ml &
          sleep 15
          
          # Run health checks
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/metrics || exit 1

  # Job 7: Production Testing
  production-testing:
    name: üß™ Production Testing
    runs-on: ubuntu-latest
    needs: [blue-green-setup, deploy-inactive]
    timeout-minutes: 20
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: üì¶ Install Test Dependencies
        run: |
          pip install pytest requests locust

      - name: üß™ Smoke Tests on Inactive Environment
        env:
          INACTIVE_ENV: ${{ needs.blue-green-setup.outputs.inactive-env }}
        run: |
          pytest src/tests/smoke/ \
            --base-url=https://${INACTIVE_ENV}.road-sign-ml.com \
            --timeout=30 \
            -v

      - name: ‚ö° Load Testing
        env:
          INACTIVE_ENV: ${{ needs.blue-green-setup.outputs.inactive-env }}
        run: |
          locust -f src/tests/performance/production_load_test.py \
            --host=https://${INACTIVE_ENV}.road-sign-ml.com \
            --users=200 \
            --spawn-rate=20 \
            --run-time=300s \
            --headless \
            --html=production-load-test.html

      - name: üìä Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-test-results
          path: production-load-test.html

  # Job 8: Traffic Switch (Blue-Green Activation)
  traffic-switch:
    name: üîÑ Switch Traffic to ${{ needs.blue-green-setup.outputs.inactive-env }}
    runs-on: ubuntu-latest
    needs: [blue-green-setup, deploy-inactive, production-testing]
    timeout-minutes: 10
    environment:
      name: production-active
      url: https://api.road-sign-ml.com
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚ò∏Ô∏è Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: üîß Configure Production Access
        run: |
          echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: üîÑ Switch Traffic
        env:
          ACTIVE_ENV: ${{ needs.blue-green-setup.outputs.active-env }}
          INACTIVE_ENV: ${{ needs.blue-green-setup.outputs.inactive-env }}
        run: |
          export KUBECONFIG=kubeconfig
          
          echo "üîÑ Switching traffic from $ACTIVE_ENV to $INACTIVE_ENV"
          
          # Update the active service to point to the new environment
          kubectl patch service road-sign-api-active -n road-sign-ml \
            -p '{"spec":{"selector":{"environment":"'$INACTIVE_ENV'"}}}'
          
          # Update labels to reflect the new active environment
          kubectl label service road-sign-api-active -n road-sign-ml \
            active-environment=$INACTIVE_ENV --overwrite
          
          echo "‚úÖ Traffic switched to $INACTIVE_ENV environment"

      - name: üîç Post-Switch Validation
        run: |
          export KUBECONFIG=kubeconfig
          
          # Wait a bit for traffic to stabilize
          sleep 30
          
          # Test the main production URL
          curl -f https://api.road-sign-ml.com/health || exit 1
          echo "‚úÖ Production health check passed"

  # Job 9: Cleanup Previous Environment
  cleanup-previous:
    name: üßπ Cleanup Previous Environment
    runs-on: ubuntu-latest
    needs: [blue-green-setup, traffic-switch]
    if: success()
    timeout-minutes: 10
    
    steps:
      - name: ‚ò∏Ô∏è Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: üîß Configure Production Access
        run: |
          echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: üßπ Scale Down Previous Environment
        env:
          PREVIOUS_ENV: ${{ needs.blue-green-setup.outputs.active-env }}
        run: |
          export KUBECONFIG=kubeconfig
          
          echo "üßπ Scaling down previous environment: $PREVIOUS_ENV"
          
          # Scale down the previous deployment to save resources
          kubectl scale deployment road-sign-api-${PREVIOUS_ENV} \
            --replicas=0 -n road-sign-ml
          
          echo "‚úÖ Previous environment scaled down"

  # Job 10: Monitoring and Alerting Setup
  post-deployment-monitoring:
    name: üìä Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [traffic-switch]
    timeout-minutes: 15
    
    steps:
      - name: üìä Update Monitoring Dashboards
        run: |
          echo "üìä Updating Grafana dashboards for new deployment"
          # Add logic to update monitoring dashboards
          
      - name: üîî Setup Alerts
        run: |
          echo "üîî Configuring production alerts"
          # Add logic to configure production alerting

      - name: üìà Initialize Metrics Collection
        run: |
          echo "üìà Starting enhanced metrics collection"
          # Add logic to start collecting production metrics

  # Job 11: Deployment Summary and Notifications
  deployment-summary:
    name: üìã Deployment Summary
    runs-on: ubuntu-latest
    needs: [
      pre-deployment-validation,
      build-production,
      traffic-switch,
      post-deployment-monitoring
    ]
    if: always()
    
    steps:
      - name: üìä Generate Deployment Report
        id: report
        run: |
          echo "üöÄ Production Deployment Summary"
          echo "================================"
          echo "Version: ${{ needs.pre-deployment-validation.outputs.version }}"
          echo "Image: ${{ needs.build-production.outputs.image-tag }}"
          echo "Commit: ${{ github.sha }}"
          echo "Environment: ${{ needs.blue-green-setup.outputs.inactive-env }}"
          echo "Status: ${{ job.status }}"
          
          if [[ "${{ needs.traffic-switch.result }}" == "success" ]]; then
            echo "‚úÖ Production deployment successful!"
            echo "üåê Production URL: https://api.road-sign-ml.com"
            echo "üìä Monitoring: https://grafana.road-sign-ml.com"
          else
            echo "‚ùå Production deployment failed!"
          fi

      - name: üí¨ Notify Team Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            üéâ Production Deployment Successful!
            
            Version: ${{ needs.pre-deployment-validation.outputs.version }}
            Environment: ${{ needs.blue-green-setup.outputs.inactive-env }}
            URL: https://api.road-sign-ml.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: üö® Notify Team Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            üö® Production Deployment Failed!
            
            Please check the deployment logs and take immediate action.
            Rollback may be required.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: üìß Email Stakeholders
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Production Deployment ${{ job.status }}: Road Sign ML v${{ needs.pre-deployment-validation.outputs.version }}"
          to: ${{ secrets.STAKEHOLDER_EMAILS }}
          from: deployments@road-sign-ml.com
          body: |
            Production deployment has completed with status: ${{ job.status }}
            
            Version: ${{ needs.pre-deployment-validation.outputs.version }}
            Commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
            
            For more details, see: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
