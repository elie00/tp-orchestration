name: 🚀 Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ENVIRONMENT: staging

jobs:
  # Job 1: Build and Push Docker Images
  build-and-push:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=staging-
            type=raw,value=staging-latest

      - name: 🐳 Build and Push API Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job 2: Security Scan of Built Image
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    timeout-minutes: 15
    
    steps:
      - name: 🔍 Scan Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 3: Deploy to Staging
  deploy-staging:
    name: 🌟 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: ${{ always() && (needs.build-and-push.result == 'success' && (needs.security-scan.result == 'success' || github.event.inputs.force_deploy == 'true')) }}
    timeout-minutes: 20
    environment:
      name: staging
      url: https://staging.road-sign-ml.com
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☸️ Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔑 Configure Kubernetes Access
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: 🔧 Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: 📝 Update Deployment Manifest
        run: |
          export IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          envsubst < kubernetes/api/deployment.yaml > deployment-staging.yaml
          
      - name: 🚀 Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig
          
          # Create namespace if it doesn't exist
          kubectl create namespace road-sign-staging || true
          
          # Apply ConfigMaps and Secrets
          kubectl apply -f kubernetes/configmap.yaml -n road-sign-staging
          kubectl apply -f kubernetes/secret.yaml -n road-sign-staging
          
          # Deploy PostgreSQL for MLflow
          kubectl apply -f kubernetes/mlflow/pvc.yaml -n road-sign-staging
          kubectl apply -f kubernetes/mlflow/deployment.yaml -n road-sign-staging
          kubectl apply -f kubernetes/mlflow/service.yaml -n road-sign-staging
          
          # Deploy API
          kubectl apply -f kubernetes/api/pvc.yaml -n road-sign-staging
          kubectl apply -f deployment-staging.yaml -n road-sign-staging
          kubectl apply -f kubernetes/api/service.yaml -n road-sign-staging
          kubectl apply -f kubernetes/api/hpa.yaml -n road-sign-staging
          
          # Wait for deployment
          kubectl rollout status deployment/road-sign-api -n road-sign-staging --timeout=300s

      - name: 🔍 Verify Deployment
        run: |
          export KUBECONFIG=kubeconfig
          
          # Check pod status
          kubectl get pods -n road-sign-staging -l app=road-sign-api
          
          # Check service endpoints
          kubectl get svc -n road-sign-staging
          
          # Test health endpoint
          kubectl port-forward svc/road-sign-api 8080:8000 -n road-sign-staging &
          sleep 10
          curl -f http://localhost:8080/health || exit 1

  # Job 4: Staging Tests
  staging-tests:
    name: 🧪 Staging Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📦 Install Test Dependencies
        run: |
          pip install pytest requests

      - name: 🧪 Run Smoke Tests
        run: |
          pytest src/tests/smoke/ \
            --base-url=https://staging.road-sign-ml.com \
            -v
        env:
          STAGING_URL: https://staging.road-sign-ml.com

      - name: 🌐 Run E2E Tests
        run: |
          pytest src/tests/e2e/ \
            --base-url=https://staging.road-sign-ml.com \
            -v
        env:
          STAGING_URL: https://staging.road-sign-ml.com

  # Job 5: Performance Baseline
  performance-baseline:
    name: ⚡ Performance Baseline
    runs-on: ubuntu-latest
    needs: deploy-staging
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📦 Install Dependencies
        run: |
          pip install locust

      - name: ⚡ Run Performance Tests
        run: |
          locust -f src/tests/performance/staging_load_test.py \
            --host=https://staging.road-sign-ml.com \
            --users=50 \
            --spawn-rate=5 \
            --run-time=300s \
            --headless \
            --html=staging-performance-report.html

      - name: 📊 Upload Performance Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-performance-report
          path: staging-performance-report.html

  # Job 6: Deployment Summary
  deployment-summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging, staging-tests, performance-baseline]
    if: always()
    
    steps:
      - name: 📊 Deployment Results
        run: |
          echo "🚀 Staging Deployment Results:"
          echo "Build & Push: ${{ needs.build-and-push.result }}"
          echo "Deploy Staging: ${{ needs.deploy-staging.result }}"
          echo "Staging Tests: ${{ needs.staging-tests.result }}"
          echo "Performance: ${{ needs.performance-baseline.result }}"
          
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "✅ Staging deployment successful!"
            echo "🌐 Staging URL: https://staging.road-sign-ml.com"
            echo "📊 MLflow: https://mlflow-staging.road-sign-ml.com"
            echo "📈 Grafana: https://grafana-staging.road-sign-ml.com"
          else
            echo "❌ Staging deployment failed!"
          fi

      - name: 💬 Notify Team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "🚨 Staging deployment failed! Please check the logs."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: ✅ Success Notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🎉 Staging deployment successful! Ready for testing at https://staging.road-sign-ml.com"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job 7: Auto-promote to Production (Optional)
  auto-promote:
    name: 🎯 Auto-promote to Production
    runs-on: ubuntu-latest
    needs: [staging-tests, performance-baseline]
    if: |
      success() && 
      github.ref == 'refs/heads/develop' && 
      needs.staging-tests.result == 'success' && 
      needs.performance-baseline.result == 'success'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔄 Create Production PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: auto-promote-to-prod
          title: "🚀 Auto-promote staging to production"
          body: |
            ## 🎯 Auto-promotion to Production
            
            This PR was automatically created after successful staging deployment and tests.
            
            ### ✅ Staging Validation Results:
            - 🧪 Staging Tests: ✅ Passed
            - ⚡ Performance Tests: ✅ Passed
            - 🔒 Security Scans: ✅ Passed
            
            ### 📋 Changes Ready for Production:
            - Image: ${{ needs.build-and-push.outputs.image-tag }}
            - Commit: ${{ github.sha }}
            
            **Review and merge to deploy to production.**
          base: main
          head: auto-promote-to-prod
