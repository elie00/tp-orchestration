name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: 🧹 Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/minimal.txt
          pip install -r requirements/dev.txt

      - name: 🔍 Lint with Black
        run: |
          black --check --diff src/
          echo "✅ Black formatting check passed"

      - name: 🔍 Lint with isort
        run: |
          isort --check-only --diff src/
          echo "✅ isort import sorting check passed"

      - name: 🔍 Lint with flake8
        run: |
          flake8 src/ --statistics
          echo "✅ flake8 linting check passed"

      - name: 🔍 Type Check with mypy
        run: |
          mypy src/ --ignore-missing-imports
          echo "✅ mypy type checking passed"

      - name: 🔒 Security Check with bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json
          echo "✅ Security check passed"

      - name: 📊 Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: bandit-report.json

  # Job 2: Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/minimal.txt
          pip install -r requirements/dev.txt

      - name: 🧪 Run Unit Tests
        run: |
          pytest src/tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=80 \
            --junitxml=pytest-report.xml \
            -v

      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}
          path: |
            pytest-report.xml
            htmlcov/
            coverage.xml

  # Job 3: Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/minimal.txt
          pip install -r requirements/dev.txt

      - name: 🔧 Setup Test Environment
        run: |
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_db"
          export REDIS_URL="redis://localhost:6379/0"

      - name: 🧪 Run Integration Tests
        run: |
          pytest src/tests/integration/ \
            --cov=src \
            --cov-report=xml \
            -v \
            --tb=short
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0

      - name: 📊 Upload Integration Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: coverage.xml

  # Job 4: API Tests
  api-tests:
    name: 🌐 API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/minimal.txt
          pip install -r requirements/dev.txt

      - name: 🚀 Start API Server
        run: |
          python src/api/main_simple.py &
          sleep 10
        env:
          ENVIRONMENT: test

      - name: 🧪 Run API Tests
        run: |
          pytest src/tests/api/ -v --tb=short

      - name: 🌐 Test API Endpoints
        run: |
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8000/docs || exit 1
          curl -f http://localhost:8000/metrics || exit 1

  # Job 5: Docker Build Test
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build API Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.api
          push: false
          tags: road-sign-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker Image
        run: |
          docker run --rm -d -p 8000:8000 --name test-api road-sign-api:test
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop test-api

  # Job 6: Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 7: Dependency Check
  dependency-check:
    name: 📋 Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔍 Check for Security Vulnerabilities
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: 📊 Upload Safety Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report
          path: safety-report.json

  # Job 8: Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/minimal.txt
          pip install locust

      - name: 🚀 Start API Server
        run: |
          python src/api/main_simple.py &
          sleep 10
        env:
          ENVIRONMENT: test

      - name: ⚡ Run Performance Tests
        run: |
          locust -f src/tests/performance/locustfile.py \
            --host=http://localhost:8000 \
            --users=10 \
            --spawn-rate=2 \
            --run-time=60s \
            --headless \
            --html=performance-report.html

      - name: 📊 Upload Performance Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-report
          path: performance-report.html

  # Job Summary
  ci-summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, api-tests, docker-build, security-scan, dependency-check, performance-tests]
    if: always()
    
    steps:
      - name: 📊 Check CI Results
        run: |
          echo "🔄 CI Pipeline Results:"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "API Tests: ${{ needs.api-tests.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.api-tests.result }}" == "success" && 
                "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "✅ All critical CI checks passed!"
          else
            echo "❌ Some CI checks failed!"
            exit 1
          fi

      - name: 🎉 Success Notification
        if: success()
        run: echo "🎉 CI Pipeline completed successfully!"
