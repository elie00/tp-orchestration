#!/bin/bash
# ==========================================
# SCRIPT D'ENTR√âE POUR LE CONTENEUR D'ENTRA√éNEMENT
# Configure l'environnement et lance les services appropri√©s
# ==========================================

set -e

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ === INITIALISATION CONTENEUR D'ENTRA√éNEMENT ===${NC}"

# ==========================================
# CONFIGURATION DE L'ENVIRONNEMENT
# ==========================================

# V√©rification des variables d'environnement n√©cessaires
if [ -z "$ENVIRONMENT" ]; then
    export ENVIRONMENT="training"
fi

echo -e "${GREEN}üìã Environnement: ${ENVIRONMENT}${NC}"

# Configuration CUDA si disponible
if command -v nvidia-smi &> /dev/null; then
    echo -e "${GREEN}üî• GPU NVIDIA d√©tect√©:${NC}"
    nvidia-smi --query-gpu=name,memory.total,memory.free --format=csv,noheader,nounits
    export CUDA_AVAILABLE=true
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aucun GPU NVIDIA d√©tect√© - mode CPU${NC}"
    export CUDA_AVAILABLE=false
fi

# Configuration des r√©pertoires
mkdir -p /workspace/data/{01_raw,02_processed,03_features,04_models}
mkdir -p /workspace/logs
mkdir -p /workspace/mlruns
mkdir -p /workspace/artifacts

# Configuration des permissions
chmod -R 755 /workspace/data
chmod -R 755 /workspace/logs

echo -e "${GREEN}‚úÖ R√©pertoires configur√©s${NC}"

# ==========================================
# CONFIGURATION MLFLOW
# ==========================================

# Configuration de la base de donn√©es MLflow
if [ ! -f "/workspace/mlflow.db" ]; then
    echo -e "${BLUE}üìä Initialisation de la base MLflow...${NC}"
    cd /workspace
    python -c "
import mlflow
mlflow.set_tracking_uri('sqlite:///mlflow.db')
print('‚úÖ Base MLflow initialis√©e')
"
fi

# ==========================================
# CONFIGURATION KAGGLE (si cl√©s disponibles)
# ==========================================

if [ -f "/workspace/.kaggle/kaggle.json" ]; then
    echo -e "${GREEN}üîë Configuration Kaggle d√©tect√©e${NC}"
    chmod 600 /workspace/.kaggle/kaggle.json
    export KAGGLE_CONFIG_DIR="/workspace/.kaggle"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Pas de configuration Kaggle - t√©l√©chargement manuel n√©cessaire${NC}"
fi

# ==========================================
# CONFIGURATION DES MOD√àLES PR√â-ENTRA√éN√âS
# ==========================================

echo -e "${BLUE}üì¶ V√©rification des mod√®les pr√©-entra√Æn√©s...${NC}"

# T√©l√©chargement des mod√®les YOLO de base si n√©cessaires
MODELS_DIR="/workspace/models"
mkdir -p $MODELS_DIR

if [ ! -f "$MODELS_DIR/yolov8n.pt" ]; then
    echo -e "${BLUE}‚¨áÔ∏è  T√©l√©chargement YOLOv8n...${NC}"
    cd $MODELS_DIR
    wget -q https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n.pt
    echo -e "${GREEN}‚úÖ YOLOv8n t√©l√©charg√©${NC}"
fi

if [ ! -f "$MODELS_DIR/yolov8s.pt" ]; then
    echo -e "${BLUE}‚¨áÔ∏è  T√©l√©chargement YOLOv8s...${NC}"
    cd $MODELS_DIR
    wget -q https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8s.pt
    echo -e "${GREEN}‚úÖ YOLOv8s t√©l√©charg√©${NC}"
fi

# ==========================================
# FONCTIONS UTILITAIRES
# ==========================================

start_mlflow_ui() {
    echo -e "${BLUE}üñ•Ô∏è  D√©marrage MLflow UI...${NC}"
    cd /workspace
    nohup mlflow ui --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow.db > logs/mlflow.log 2>&1 &
    echo -e "${GREEN}‚úÖ MLflow UI d√©marr√© sur http://localhost:5000${NC}"
}

start_jupyter() {
    echo -e "${BLUE}üìì D√©marrage Jupyter Lab...${NC}"
    nohup jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root > logs/jupyter.log 2>&1 &
    echo -e "${GREEN}‚úÖ Jupyter Lab d√©marr√© sur http://localhost:8888${NC}"
}

start_tensorboard() {
    echo -e "${BLUE}üìà D√©marrage TensorBoard...${NC}"
    nohup tensorboard --logdir=/workspace/logs --host=0.0.0.0 --port=6006 > logs/tensorboard.log 2>&1 &
    echo -e "${GREEN}‚úÖ TensorBoard d√©marr√© sur http://localhost:6006${NC}"
}

run_training() {
    echo -e "${BLUE}üèãÔ∏è  Lancement de l'entra√Ænement...${NC}"
    cd /workspace
    python src/ml_pipelines/training_pipeline.py
}

run_data_pipeline() {
    echo -e "${BLUE}üìä Lancement du pipeline de donn√©es...${NC}"
    cd /workspace
    python src/ml_pipelines/data_pipeline.py
}

run_inference_test() {
    echo -e "${BLUE}üîç Test du pipeline d'inf√©rence...${NC}"
    cd /workspace
    python src/ml_pipelines/inference_pipeline.py
}

run_tests() {
    echo -e "${BLUE}üß™ Ex√©cution des tests...${NC}"
    cd /workspace
    python -m pytest src/tests/ -v --cov=src --cov-report=html --cov-report=term
}

show_help() {
    echo -e "${BLUE}üöÄ === AIDE CONTENEUR D'ENTRA√éNEMENT ===${NC}"
    echo ""
    echo "Commandes disponibles:"
    echo "  training          - Lance l'entra√Ænement complet"
    echo "  data-pipeline     - Lance le pipeline de donn√©es"
    echo "  inference-test    - Test le pipeline d'inf√©rence"
    echo "  mlflow-ui         - D√©marre MLflow UI"
    echo "  jupyter           - D√©marre Jupyter Lab"
    echo "  tensorboard       - D√©marre TensorBoard"
    echo "  tests             - Ex√©cute les tests"
    echo "  shell             - Ouvre un shell interactif"
    echo "  help              - Affiche cette aide"
    echo ""
    echo "Services disponibles:"
    echo "  - MLflow UI: http://localhost:5000"
    echo "  - Jupyter Lab: http://localhost:8888"
    echo "  - TensorBoard: http://localhost:6006"
    echo ""
}

# ==========================================
# GESTION DES COMMANDES
# ==========================================

case "${1:-help}" in
    "training")
        start_mlflow_ui
        sleep 2
        run_data_pipeline
        run_training
        ;;
    "data-pipeline")
        start_mlflow_ui
        sleep 2
        run_data_pipeline
        ;;
    "inference-test")
        start_mlflow_ui
        sleep 2
        run_inference_test
        ;;
    "mlflow-ui")
        start_mlflow_ui
        tail -f logs/mlflow.log
        ;;
    "jupyter")
        start_jupyter
        tail -f logs/jupyter.log
        ;;
    "tensorboard")
        start_tensorboard
        tail -f logs/tensorboard.log
        ;;
    "all-services")
        start_mlflow_ui
        start_jupyter
        start_tensorboard
        echo -e "${GREEN}‚úÖ Tous les services d√©marr√©s${NC}"
        echo -e "${BLUE}üìã Logs disponibles dans /workspace/logs/${NC}"
        tail -f logs/*.log
        ;;
    "tests")
        run_tests
        ;;
    "shell")
        echo -e "${GREEN}üêö Shell interactif - tapez 'exit' pour quitter${NC}"
        /bin/bash
        ;;
    "help"|*)
        show_help
        ;;
esac

echo -e "${GREEN}üéâ === CONTENEUR D'ENTRA√éNEMENT PR√äT ===${NC}"
